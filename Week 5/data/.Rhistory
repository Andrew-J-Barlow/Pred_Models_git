plot(usconsumption, ylab="% change in consumption and income",
plot.type="single", col=1:2, xlab="Year")
legend("topright", legend=c("Consumption","Income"),
lty=1, col=c(1,2), cex=.9)
plot(consumption ~ income, data=usconsumption,
ylab="% change in consumption", xlab="% change in income")
abline(fit.ex3)
summary(fit.ex3)
fcast <- forecast(fit.ex3, newdata = data.frame(income = c(-1, 1)))
par(mfrow = c(1, 1))
plot(fcast, ylab = "% change in consumption", xlab = "% change in income")
fit.ex4 <- tslm(austa ~ trend)
f <- forecast(fit.ex4, h = 5, level = c(80, 95))
plot(f, ylab = "International tourist arrivals to Australia (millions)",
xlab = "t")
lines(fit.ex4$fitted, col = "blue")
summary(fit.ex4)
par(mfrow=c(2,2))
res3 <- ts(resid(fit.ex3), s = 1970.25, f = 4)
plot.ts(res3, ylab = "res (Consumption)")
abline(0, 0)
Acf(res3)
res4 <- resid(fit.ex4)
plot(res4, ylab = "res (Tourism)")
abline(0, 0)
Acf(res4)
nf <- layout(matrix(c(1, 2, 3, 3), 2, 2, byrow = TRUE))
plot(ausair, ylab = "Air Passengers in Australia (millions)", xlab = "Year")
plot(guinearice, ylab = "Rice Production in Guinea (million tons) ",
xlab = "Year")
plot(c(guinearice), c(ausair),
xlab = "Rice Production in Guinea (million tons)",
ylab = "Air Passengers in Australia (millions)")
summary(lm(ausair ~ guinearice))
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
summary(lm(ausair ~ guinearice))
plot(ausair, ylab = "Air Passengers in Australia (millions)", xlab = "Year")
plot(guinearice, ylab = "Rice Production in Guinea (million tons) ",
xlab = "Year")
plot(c(guinearice), c(ausair),
xlab = "Rice Production in Guinea (million tons)",
ylab = "Air Passengers in Australia (millions)")
summary(lm(ausair ~ guinearice))
data(airmiles)
plot(log(airmiles),ylab='Log(airmiles)',xlab='Year', main='')
acf(diff(diff(window(log(airmiles),end=c(2001,8)),12)),lag.max=48,main='')
air.m1=arimax(log(airmiles),order=c(0,1,1),seasonal=list(order=c(0,1,1),
period=12),xtransf=data.frame(I911=1*(seq(airmiles)==69),
I911=1*(seq(airmiles)==69)),
transfer=list(c(0,0),c(1,0)),xreg=data.frame(Dec96=1*(seq(airmiles)==12),
Jan97=1*(seq(airmiles)==13),Dec02=1*(seq(airmiles)==84)),method='ML')
install.packages("TSA")
library(TSA)
data(airmiles)
plot(log(airmiles),ylab='Log(airmiles)',xlab='Year', main='')
acf(diff(diff(window(log(airmiles),end=c(2001,8)),12)),lag.max=48,main='')
air.m1=arimax(log(airmiles),order=c(0,1,1),seasonal=list(order=c(0,1,1),
period=12),xtransf=data.frame(I911=1*(seq(airmiles)==69),
I911=1*(seq(airmiles)==69)),
transfer=list(c(0,0),c(1,0)),xreg=data.frame(Dec96=1*(seq(airmiles)==12),
Jan97=1*(seq(airmiles)==13),Dec02=1*(seq(airmiles)==84)),method='ML')
library(forecast)
library(fpp)
# Example 4.3. US consumption expenditure
fit.ex3 <- lm(consumption ~ income, data=usconsumption)
par(mfrow=c(1,2))
plot(usconsumption, ylab="% change in consumption and income",
plot.type="single", col=1:2, xlab="Year")
legend("topright", legend=c("Consumption","Income"),
lty=1, col=c(1,2), cex=.9)
plot(consumption ~ income, data=usconsumption,
ylab="% change in consumption", xlab="% change in income")
abline(fit.ex3)
summary(fit.ex3)
fcast <- forecast(fit.ex3, newdata = data.frame(income = c(-1, 1)))
par(mfrow = c(1, 1))
plot(fcast, ylab = "% change in consumption", xlab = "% change in income")
# Example 4.4 Linear trend
fit.ex4 <- tslm(austa ~ trend)
f <- forecast(fit.ex4, h = 5, level = c(80, 95))
plot(f, ylab = "International tourist arrivals to Australia (millions)",
xlab = "t")
lines(fit.ex4$fitted, col = "blue")
summary(fit.ex4)
par(mfrow=c(2,2))
res3 <- ts(resid(fit.ex3), s = 1970.25, f = 4)
plot.ts(res3, ylab = "res (Consumption)")
abline(0, 0)
Acf(res3)
res4 <- resid(fit.ex4)
plot(res4, ylab = "res (Tourism)")
abline(0, 0)
Acf(res4)
# Spurious regression
nf <- layout(matrix(c(1, 2, 3, 3), 2, 2, byrow = TRUE))
plot(ausair, ylab = "Air Passengers in Australia (millions)", xlab = "Year")
plot(guinearice, ylab = "Rice Production in Guinea (million tons) ",
xlab = "Year")
plot(c(guinearice), c(ausair),
xlab = "Rice Production in Guinea (million tons)",
ylab = "Air Passengers in Australia (millions)")
summary(lm(ausair ~ guinearice))
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
(fit2 <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(1,0,2)))
Box.test(residuals(fit2),fitdf=5,lag=10,type="Ljung")
fcast <- forecast(fit2,xreg=rep(mean(usconsumption[,2]),8), h=8)
plot(fcast, main="Forecasts from regression with ARIMA(1,0,2) errors")
fit <- auto.arima(usconsumption[,1], xreg=usconsumption[,2])
# Example 9.2. International visitors to Australia
plot(austa, xlab = "Year", ylab = "millions of people",
main = "Total annual international visitors to Australia")
(auto.arima(austa, d = 0, xreg = 1:length(austa)))
(auto.arima(austa, d = 1))
fit1 <- Arima(austa, order = c(0, 1, 0), include.drift = TRUE)
fit2 <- Arima(austa, order = c(2, 0, 0), include.drift = TRUE)
par(mfrow = c(2,1))
plot(forecast(fit2),
main = "Forecasts from linear trend + AR(2) error", ylim = c(1, 8))
plot(forecast(fit1), ylim = c(1, 8))
# Example 9.3 TV advertising and insurance quotations
plot(insurance, main="Insurance advertising and quotations", xlab="Year")
# Lagged predictors. Test 0, 1, 2 or 3 lags.
Advert <- cbind(insurance[,2],
c(NA,insurance[1:39,2]),
c(NA,NA,insurance[1:38,2]),
c(NA,NA,NA,insurance[1:37,2]))
colnames(Advert) <- paste("AdLag",0:3,sep="")
# Choose optimal lag length for advertising based on AIC
# Restrict data so models use same fitting period
fit1 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1], d=0)
fit2 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:2], d=0)
fit3 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:3], d=0)
fit4 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:4], d=0)
# Best model fitted to all data (based on AICc)
# Refit using all data
fit <- auto.arima(insurance[,1], xreg=Advert[,1:2], d=0)
fit
fc8 <- forecast(fit, xreg=cbind(c(Advert[40,1],rep(8,19)),rep(8,20)), h=20)
par(mfrow = c(1,1))
plot(fc8, main="Forecast quotes with advertising set to 8", ylab="Quotes")
# Lagged predictors. Test 0, 1, 2 or 3 lags.
Advert <- cbind(insurance[,2],
c(NA,insurance[1:39,2]),
c(NA,NA,insurance[1:38,2]),
c(NA,NA,NA,insurance[1:37,2]))
colnames(Advert) <- paste("AdLag",0:3,sep="")
# Choose optimal lag length for advertising based on AIC
# Restrict data so models use same fitting period
fit1 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1], d=0)
fit2 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:2], d=0)
fit3 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:3], d=0)
fit4 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:4], d=0)
fit1
fit2
fit3
fit4
# Best model fitted to all data (based on AICc)
# Refit using all data
fit <- auto.arima(insurance[,1], xreg=Advert[,1:2], d=0)
fit
fc8 <- forecast(fit, xreg=cbind(c(Advert[40,1],rep(8,19)),rep(8,20)), h=20)
par(mfrow = c(1,1))
plot(fc8, main="Forecast quotes with advertising set to 8", ylab="Quotes")
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
(fit2 <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(1,0,2)))
Box.test(residuals(fit2),fitdf=5,lag=10,type="Ljung")
fcast <- forecast(fit2,xreg=rep(mean(usconsumption[,2]),8), h=8)
plot(fcast, main="Forecasts from regression with ARIMA(1,0,2) errors")
fit <- auto.arima(usconsumption[,1], xreg=usconsumption[,2])
plot(fit)
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
(fit2 <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(1,0,2)))
Box.test(residuals(fit2),fitdf=5,lag=10,type="Ljung")
fcast <- forecast(fit2,xreg=rep(mean(usconsumption[,2]),8), h=8)
plot(fcast, main="Forecasts from regression with ARIMA(1,0,2) errors")
plot(fit <- auto.arima(usconsumption[,1], xreg=usconsumption[,2])
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
(fit2 <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(1,0,2)))
Box.test(residuals(fit2),fitdf=5,lag=10,type="Ljung")
fcast <- forecast(fit2,xreg=rep(mean(usconsumption[,2]),8), h=8)
plot(fcast, main="Forecasts from regression with ARIMA(1,0,2) errors")
plot(fit <- auto.arima(usconsumption[,1], xreg=usconsumption[,2]))
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
(fit2 <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(1,0,2)))
Box.test(residuals(fit2),fitdf=5,lag=10,type="Ljung")
fcast <- forecast(fit2,xreg=rep(mean(usconsumption[,2]),8), h=8)
plot(fcast, main="Forecasts from regression with ARIMA(1,0,2) errors")
acf(fit <- auto.arima(usconsumption[,1], xreg=usconsumption[,2]))
# Example 9.2. International visitors to Australia
plot(austa, xlab = "Year", ylab = "millions of people",
main = "Total annual international visitors to Australia")
(auto.arima(austa, d = 0, xreg = 1:length(austa)))
(auto.arima(austa, d = 1))
fit1 <- Arima(austa, order = c(0, 1, 0), include.drift = TRUE)
fit2 <- Arima(austa, order = c(2, 0, 0), include.drift = TRUE)
par(mfrow = c(2,1))
plot(forecast(fit2),
main = "Forecasts from linear trend + AR(2) error", ylim = c(1, 8))
plot(forecast(fit1), ylim = c(1, 8))
# Example 9.3 TV advertising and insurance quotations
plot(insurance, main="Insurance advertising and quotations", xlab="Year")
# Lagged predictors. Test 0, 1, 2 or 3 lags.
Advert <- cbind(insurance[,2],
c(NA,insurance[1:39,2]),
c(NA,NA,insurance[1:38,2]),
c(NA,NA,NA,insurance[1:37,2]))
colnames(Advert) <- paste("AdLag",0:3,sep="")
# Choose optimal lag length for advertising based on AIC
# Restrict data so models use same fitting period
fit1 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1], d=0)
fit2 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:2], d=0)
fit3 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:3], d=0)
fit4 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:4], d=0)
fit1
fit2
fit3
fit4
# Best model fitted to all data (based on AICc), which was the xreg=Advert[4:40,1:2], d=0
# Refit using all data
fit <- auto.arima(insurance[,1], xreg=Advert[,1:2], d=0)
fit
fc8 <- forecast(fit, xreg=cbind(c(Advert[40,1],rep(8,19)),rep(8,20)), h=20)
par(mfrow = c(1,1))
plot(fc8, main="Forecast quotes with advertising set to 8", ylab="Quotes")
# Example 9.3 TV advertising and insurance quotations
plot(insurance, main="Insurance advertising and quotations", xlab="Year")
# Lagged predictors. Test 0, 1, 2 or 3 lags.
Advert <- cbind(insurance[,2],
c(NA,insurance[1:39,2]),
c(NA,NA,insurance[1:38,2]),
c(NA,NA,NA,insurance[1:37,2]))
colnames(Advert) <- paste("AdLag",0:3,sep="")
# Choose optimal lag length for advertising based on AIC
# Restrict data so models use same fitting period
it1 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1], d=0)
fit2 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:2], d=0)
fit3 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:3], d=0)
fit4 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:4], d=0)
fit1f
# Example 9.3 TV advertising and insurance quotations
plot(insurance, main="Insurance advertising and quotations", xlab="Year")
# Lagged predictors. Test 0, 1, 2 or 3 lags.
Advert <- cbind(insurance[,2],
c(NA,insurance[1:39,2]),
c(NA,NA,insurance[1:38,2]),
c(NA,NA,NA,insurance[1:37,2]))
colnames(Advert) <- paste("AdLag",0:3,sep="")
# Choose optimal lag length for advertising based on AIC
# Restrict data so models use same fitting period
it1 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1], d=0)
fit2 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:2], d=0)
fit3 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:3], d=0)
fit4 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:4], d=0)
fit1
fit2
fit3
fit4
# Best model fitted to all data (based on AICc), which was the xreg=Advert[4:40,1:2], d=0
# Refit using all data
fit <- auto.arima(insurance[,1], xreg=Advert[,1:2], d=0)
fit
fc8 <- forecast(fit, xreg=cbind(c(Advert[40,1],rep(8,19)),rep(8,20)), h=20)
par(mfrow = c(1,1))
plot(fc8, main="Forecast quotes with advertising set to 8", ylab="Quotes")
# Example 9.3 TV advertising and insurance quotations
plot(insurance, main="Insurance advertising and quotations", xlab="Year")
# Lagged predictors. Test 0, 1, 2 or 3 lags.
Advert <- cbind(insurance[,2],
c(NA,insurance[1:39,2]),
c(NA,NA,insurance[1:38,2]),
c(NA,NA,NA,insurance[1:37,2]))
colnames(Advert) <- paste("AdLag",0:3,sep="")
# Choose optimal lag length for advertising based on AIC
# Restrict data so models use same fitting period
fit1 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1], d=0)
fit2 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:2], d=0)
fit3 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:3], d=0)
fit4 <- auto.arima(insurance[4:40,1], xreg=Advert[4:40,1:4], d=0)
fit1
fit2
fit3
fit4
# Best model fitted to all data (based on AICc), which was the xreg=Advert[4:40,1:2], d=0
# Refit using all data
fit <- auto.arima(insurance[,1], xreg=Advert[,1:2], d=0)
fit
fc8 <- forecast(fit, xreg=cbind(c(Advert[40,1],rep(8,19)),rep(8,20)), h=20)
par(mfrow = c(1,1))
plot(fc8, main="Forecast quotes with advertising set to 8", ylab="Quotes")
install.packages("rstanarm")
library(rstanarm)
op <- options(contrasts = c("contr.helmert", "contr.poly"))
stan_aov(yield ~ block + N*P*K, data = npk,
prior = R2(0.5), seed = 12345)
options(op)
(fit <- stan_lm(mpg ~ wt + qsec + am, data = mtcars, prior = R2(0.75),
# the next line is only to make the example go fast enough
chains = 1, iter = 500, seed = 12345))
plot(fit, prob = 0.8)y
plot(fit, "hist", pars = c("wt", "am", "qsec", "sigma"),
transformations = list(sigma = "log"))
plot(fit, prob = 0.8)
plot(fit, "hist", pars = c("wt", "am", "qsec", "sigma"),
transformations = list(sigma = "log"))
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
library(forecast)
library(fpp)
# Example 4.3. US consumption expenditure
#LM Regression with Forecasting
fit.ex3 <- lm(consumption ~ income, data=usconsumption)
par(mfrow=c(1,2))
plot(usconsumption, ylab="% change in consumption and income",
plot.type="single", col=1:2, xlab="Year")
legend("topright", legend=c("Consumption","Income"),
lty=1, col=c(1,2), cex=.9)
plot(consumption ~ income, data=usconsumption,
ylab="% change in consumption", xlab="% change in income")
abline(fit.ex3)
summary(fit.ex3)
fcast <- forecast(fit.ex3, newdata = data.frame(income = c(-1, 1)))
par(mfrow = c(1, 1))
plot(fcast, ylab = "% change in consumption", xlab = "% change in income")
# Example 4.4 Linear trend
fit.ex4 <- tslm(austa ~ trend)
f <- forecast(fit.ex4, h = 5, level = c(80, 95))
plot(f, ylab = "International tourist arrivals to Australia (millions)",
xlab = "t")
lines(fit.ex4$fitted, col = "blue")
summary(fit.ex4)
par(mfrow=c(2,2))
res3 <- ts(resid(fit.ex3), s = 1970.25, f = 4)
plot.ts(res3, ylab = "res (Consumption)")
abline(0, 0)
Acf(res3)
res4 <- resid(fit.ex4)
plot(res4, ylab = "res (Tourism)")
abline(0, 0)
Acf(res4)
# Spurious regression
nf <- layout(matrix(c(1, 2, 3, 3), 2, 2, byrow = TRUE))
plot(ausair, ylab = "Air Passengers in Australia (millions)", xlab = "Year")
plot(guinearice, ylab = "Rice Production in Guinea (million tons) ",
xlab = "Year")
plot(c(guinearice), c(ausair),
xlab = "Rice Production in Guinea (million tons)",
ylab = "Air Passengers in Australia (millions)")
summary(lm(ausair ~ guinearice))
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
(fit2 <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(1,0,2)))
Box.test(residuals(fit2),fitdf=5,lag=10,type="Ljung")
fcast <- forecast(fit2,xreg=rep(mean(usconsumption[,2]),8), h=8)
plot(fcast, main="Forecasts from regression with ARIMA(1,0,2) errors")
fit <- auto.arima(usconsumption[,1], xreg=usconsumption[,2])
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
(fit2 <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(1,0,2)))
Box.test(residuals(fit2),fitdf=5,lag=10,type="Ljung")
residuals.Arima(fit2, type='regression')
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
(fit2 <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(1,0,2)))
#Box.test(residuals(fit2),fitdf=5,lag=10,type="Ljung")
residuals.Arima(fit2, type='regression')
(fit2 <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(1,0,2)))
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(arima.errors(fit), type='regression',main="ARIMA errors")
install.packages(c("checkmate", "curl", "data.table", "gapminder", "glue", "irlba", "ISLR", "lazyeval", "lubridate", "purrr", "quantmod", "quantreg", "Rcmdr", "RcppArmadillo", "tidyr", "tidyselect"))
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(residuals.Arima(fit), main="ARIMA errors")
#US expenditures
plot(usconsumption, xlab="Year",
main="Quarterly changes in US consumption and personal income")
fit <- Arima(usconsumption[,1], xreg=usconsumption[,2],
order=c(2,0,0))
tsdisplay(residuals.Arima(fit), main="ARIMA errors")
#A continuous Target
setwd('/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Predictive Models/Pred_Models_git/Week 5/data')
## Step 2: Exploring and preparing the data ----
# read in data and examine structure
concrete <- read.csv("concrete.csv")
str(concrete)
#custom normalization function
#This is called min/max normalization (vs z-score)
#Normalization by Scaling Between 0 and 1
#Common way for ANN
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# apply min/max normalization to entire data frame
#note all values are now between 0 and 1
concrete_norm <- as.data.frame(lapply(concrete, normalize))
boxplot(concrete_norm)
# confirm that the range is now between zero and one
summary(concrete_norm$strength)
# compared to the original minimum and maximum
summary(concrete$strength)
# create training and test data
#Split the dataset into a training and testing sets 70/30
concrete_train <- concrete_norm[1:773, ]
concrete_test <- concrete_norm[774:1030, ]
## Step 3: Training a model on the data ----
# train the neuralnet model
library(neuralnet)
# simple ANN with only a two hidden neurons
concrete_model_1 <- neuralnet(formula = strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train, hidden = 2, algorithm = "rprop+", learningrate=NULL)
#rprop+ is a backpropagation method called resilient backpropagation. It modifies
#its learning rate on the error.
# visualize the network topology
#note one node in the hidden layer
plot(concrete_model_1)
#table of nuerons and weights
concrete_model_1$result.matrix
## Step 4: Evaluating model performance ----
# obtain model results
model_results_1 <- compute(concrete_model_1, concrete_test[1:8]) #You are running the training set through the ANN model
# obtain predicted strength values
predicted_strength_1 <- model_results_1$net.result #The prediction of each observation
# examine the correlation between predicted and actual values
cor(predicted_strength_1, concrete_test$strength)
#RMSE
sqrt(mean((concrete_test$strength-predicted_strength_1)^2))
## Step 5: Improving model performance ----
# a more complex neural network topology with 5 hidden neurons
concrete_model2 <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train, hidden = 5,algorithm = "rprop+", learningrate=NULL)
# plot the network
#note 5 neurons in the hidden layer
plot(concrete_model2)
# evaluate the results as we did before
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <- model_results2$net.result
cor(predicted_strength2, concrete_test$strength)
predicted_strength2[1:10]
#what do you notice about the values?
#Return norm value to a regular value
denormalize <- function(x) {
return(x*(max(concrete$strength)) - min(concrete$strength))+min(concrete$strength)
}
#look at predicted vs actual
accuracy<-data.frame(denormalize(predicted_strength2),concrete$strength[774:1030])
#plot pred vs actual
plot(denormalize(predicted_strength2),concrete$strength[774:1030])
#Model with two hidden layers
concrete_model3 <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train, hidden = c(5,3), algorithm = "rprop+", learningrate=NULL)
plot(concrete_model3)
plot(concrete_model3)
